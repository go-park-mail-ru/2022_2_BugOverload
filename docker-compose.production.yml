version: "3.7"

services:
  dev:
    container_name: "dev"
    networks:
      - localstack-net
      - postgres-net
      - monitoring-net
    image: lonkidely/golang_web_light:latest
    environment:
      AWS_PROFILE: "${AWS_PROFILE}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_SSLMODE: "${POSTGRES_SSLMODE}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
    volumes:
      - .:/project
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"


  api:
    container_name: "api"
    networks:
      - postgres-net
      - monitoring-net
    build:
      context: ./docker
      dockerfile: microservice.Dockerfile
    command: sh -c "cd app && ./api_bin -config-path=./configs/prod.toml"
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_SSLMODE: "${POSTGRES_SSLMODE}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
    volumes:
      - ./logs/api:/logs/api
      - ./cmd/api:/app
    ports:
      - "8088:8088"
      - "9001:9001"
    depends_on:
      - image
      - warehouse
      - auth


  image:
    container_name: "image"
    networks:
      - localstack-net
      - postgres-net
      - monitoring-net
    build:
      context: ./docker
      dockerfile: microservice.Dockerfile
    command: sh -c "cd app && ./api_bin -config-path=./configs/prod.toml"
    environment:
      AWS_PROFILE: "${AWS_PROFILE}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_REGION: "${AWS_REGION}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_SSLMODE: "${POSTGRES_SSLMODE}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
    volumes:
      - ./logs/image:/logs/image
      - ./cmd/image:/app
    ports:
      - "8089:8089"
      - "9002:9002"
    depends_on:
      - localstack
      - main_db


  warehouse:
    container_name: "warehouse"
    networks:
      - postgres-net
      - monitoring-net
    build:
      context: ./docker
      dockerfile: microservice.Dockerfile
    command: sh -c "./app/warehouse_bin -config-path=./app/configs/prod.toml"
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_SSLMODE: "${POSTGRES_SSLMODE}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
    volumes:
      - ./logs/warehouse:/logs/warehouse
      - ./cmd/warehouse:/app
    ports:
      - "8090:8090"
      - "9003:9003"
    depends_on:
      - main_db


  auth:
    container_name: "auth"
    networks:
      - postgres-net
      - monitoring-net
    build:
      context: ./docker
      dockerfile: microservice.Dockerfile
    command: sh -c "./app/auth_bin -config-path=./app/configs/prod.toml"
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_SSLMODE: "${POSTGRES_SSLMODE}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
    volumes:
      - ./logs/auth:/logs/auth
      - ./cmd/auth:/app
    ports:
      - "8091:8091"
      - "9004:9004"
    depends_on:
      - main_db


  localstack:
    hostname: localstack
    networks:
      - localstack-net
    container_name: "localstack"
    image: localstack/localstack:latest
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}

      - LOCALSTACK_HOSTNAME=localstack
      - EXTERNAL_HOSTNAME=localstack

      - SERVICES=s3
      # - DEBUG=1

      - DATA_DIR=/tmp/localstack/data
      - EAGER_SERVICE_LOADING=1
      - LEGACY_DIRECTORIES=1

      - LAMBDA_EXECUTOR=docker-reuse
      - LAMBDA_REMOTE_DOCKER=false
      - LAMBDA_REMOVE_CONTAINERS=true

      - KINESIS_STREAM_SHARDS=1
      - KINESIS_ERROR_PROBABILITY=0.0
      - KINESIS_STREAM_NAME=kinesis-stream
      - KINESIS_PROVIDER=kinesalite

      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - ./data:/tmp/localstack
      # - "/var/run/docker.sock:/var/run/docker.sock"
      - ./bin:/docker-entrypoint-initaws.d
    ports:
      - "4566-4599:4566-4599"


  main_db:
    container_name: "main_db"
    networks:
      - postgres-net
    image: postgres:latest
    command:
      - "postgres"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=512MB"
      - "-c"
      - "effective_cache_size=512MB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=1GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "pg_stat_statements.track_utility=false"
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - "5432:5432"


  admin_db:
    container_name: "admin_db"
    networks:
      - postgres-net
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.admin"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_CONFIG_SERVER_MODE: "True"
    ports:
      - "5050:80"
    depends_on:
      - main_db


  prometheus:
    container_name: "prometheus"
    networks:
      - monitoring-net
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    #      - '--web.external-url=${PROMETHEUS_URL}'
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - monitor_db
      - api
      - warehouse
      - image
      - auth


  monitor_db:
    container_name: "monitor_db"
    networks:
      - postgres-net
      - monitoring-net
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_URI: "main_db:5432/${POSTGRES_DB}?sslmode=disable"
      DATA_SOURCE_USER: "${POSTGRES_USER}"
      DATA_SOURCE_PASS: "${POSTGRES_PASSWORD}"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./scripts/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "9187:9187"
    depends_on:
      - main_db


  node_exporter:
    container_name: "node_exporter"
    image: quay.io/prometheus/node-exporter:latest
    networks:
      - monitoring-net
    user: root
    privileged: true
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"


  grafana:
    container_name: "grafana"
    image: grafana/grafana:latest
    networks:
      - monitoring-net
    volumes:
      - ./monitoring/grafana/data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      TZ: "Europe/Moscow"
      GF_SECURITY_ADMIN_USER: '${GF_SECURITY_ADMIN_USER}'
      GF_SECURITY_ADMIN_PASSWORD: '${GF_SECURITY_ADMIN_PASSWORD}'
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource,vonage-status-panel'
    ports:
      - "3000:3000"
    depends_on:
      - node_exporter
      - prometheus
    user: "104:107"


  alertmanager:
    image: prom/alertmanager:latest
    container_name: "alertmanager"
    networks:
      - monitoring-net
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    #      - '--web.external-url=http://localhost:9093'
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    ports:
      - '9093:9093'


networks:
  localstack-net:
    external: false
    driver: bridge
    name: localstack-net
  postgres-net:
    driver: bridge
    name: postgres-net
  monitoring-net:
    driver: bridge
    name: monitoring-net
