basePath: /
definitions:
  httpmodels.ErrResponseAuthDefault:
    properties:
      error:
        example: 'Auth: [{{Reason}}]'
        type: string
    type: object
  httpmodels.ErrResponseAuthNoCookie:
    properties:
      error:
        example: 'Auth: [request has no cookies]'
        type: string
    type: object
  httpmodels.ErrResponseAuthNoSuchCookie:
    properties:
      error:
        example: 'Auth: [no such cookie]'
        type: string
    type: object
  httpmodels.ErrResponseAuthNoSuchUser:
    properties:
      error:
        example: 'Auth: [such user doesn''t exist]'
        type: string
    type: object
  models.FilmCollectionResponse:
    properties:
      films:
        items:
          $ref: '#/definitions/models.filmInCollectionResponse'
        type: array
      title:
        example: Популярное
        type: string
    type: object
  models.RecommendFilmResponse:
    properties:
      film_id:
        example: 23
        type: integer
      film_name:
        example: Терминатор
        type: string
      genres:
        example:
        - фантастика
        - боевик
        items:
          type: string
        type: array
      poster_hor:
        example: '{{ссылка}}'
        type: string
      ratio:
        example: "8.8"
        type: string
      short_description:
        example: Идет борьба сопротивления людей против машин
        type: string
      year_prod:
        example: "2008"
        type: string
    type: object
  models.UserAuthResponse:
    properties:
      avatar:
        example: '{{ссылка}}'
        type: string
      email:
        example: dop123@mail.ru
        type: string
      nickname:
        example: Bot373
        type: string
    type: object
  models.UserLoginRequest:
    properties:
      email:
        example: YasaPupkinEzji@top.world
        type: string
      nickname:
        example: StepByyyy
        type: string
      password:
        example: Widget Adapter
        type: string
    type: object
  models.UserLoginResponse:
    properties:
      avatar:
        example: '{{ссылка}}'
        type: string
      email:
        example: dop123@mail.ru
        type: string
      nickname:
        example: StepByyyy
        type: string
    type: object
  models.UserSignupRequest:
    properties:
      email:
        example: YasaPupkinEzji@top.world
        type: string
      nickname:
        example: StepByyyy
        type: string
      password:
        example: Widget Adapter
        type: string
    type: object
  models.UserSignupResponse:
    properties:
      avatar:
        example: '{{ссылка}}'
        type: string
      email:
        example: dop123@mail.ru
        type: string
      nickname:
        example: StepByyyy
        type: string
    type: object
  models.filmInCollectionResponse:
    properties:
      film_id:
        example: 23
        type: integer
      film_name:
        example: Game of Thrones
        type: string
      genres:
        example:
        - фэнтези
        - приключения
        items:
          type: string
        type: array
      poster_ver:
        example: '{{ссылка}}'
        type: string
      ratio:
        example: "7.9"
        type: string
      year_prod:
        example: "2014"
        type: string
    type: object
host: movie-gate.online
info:
  contact: {}
  description: Server for MovieGate application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: MovieGate
  version: "1.0"
paths:
  /v1/auth:
    get:
      description: Sending login and password
      produces:
      - application/json
      responses:
        "200":
          description: successfully auth
          schema:
            $ref: '#/definitions/models.UserAuthResponse'
        "400":
          description: return error
          schema:
            $ref: '#/definitions/httpmodels.ErrResponseAuthDefault'
        "401":
          description: no cookie
          schema:
            $ref: '#/definitions/httpmodels.ErrResponseAuthNoCookie'
        "404":
          description: such cookie not found
          schema:
            $ref: '#/definitions/httpmodels.ErrResponseAuthNoSuchCookie'
        "405":
          description: method not allowed
        "500":
          description: something unusual has happened
      summary: Defining an authorized user
      tags:
      - user
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Sending login and password
      parameters:
      - description: Request body for login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successfully login
          schema:
            $ref: '#/definitions/models.UserLoginResponse'
        "400":
          description: return error
          schema:
            $ref: '#/definitions/httpmodels.ErrResponseAuthDefault'
        "404":
          description: such user not found
          schema:
            $ref: '#/definitions/httpmodels.ErrResponseAuthNoSuchUser'
        "405":
          description: method not allowed
        "500":
          description: something unusual has happened
      summary: User authentication
      tags:
      - user
  /v1/auth/logout:
    get:
      description: Session delete
      responses:
        "204":
          description: successfully logout
        "400":
          description: return error
          schema:
            $ref: '#/definitions/httpmodels.ErrResponseAuthDefault'
        "401":
          description: no cookie
          schema:
            $ref: '#/definitions/httpmodels.ErrResponseAuthNoCookie'
        "404":
          description: such cookie not found
          schema:
            $ref: '#/definitions/httpmodels.ErrResponseAuthNoSuchCookie'
        "405":
          description: method not allowed
        "500":
          description: something unusual has happened
      summary: User logout
      tags:
      - user
  /v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Sending login and password for registration
      parameters:
      - description: Request body for login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserSignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successfully login
          schema:
            $ref: '#/definitions/models.UserSignupResponse'
        "400":
          description: return error
          schema:
            $ref: '#/definitions/httpmodels.ErrResponseAuthDefault'
        "404":
          description: such user not found
          schema:
            $ref: '#/definitions/httpmodels.ErrResponseAuthNoSuchUser'
        "405":
          description: method not allowed
        "500":
          description: something unusual has happened
      summary: New user registration
      tags:
      - user
  /v1/in_cinema:
    get:
      description: Films from the "in cinema" category
      produces:
      - application/json
      responses:
        "200":
          description: returns an array of movies
          schema:
            $ref: '#/definitions/models.FilmCollectionResponse'
        "400":
          description: return error
        "405":
          description: method not allowed
        "500":
          description: something unusual has happened
      summary: In cinema movies
      tags:
      - collections
  /v1/popular_films:
    get:
      description: Films from the "popular" category
      produces:
      - application/json
      responses:
        "200":
          description: returns an array of movies
          schema:
            $ref: '#/definitions/models.FilmCollectionResponse'
        "400":
          description: return error
        "405":
          description: method not allowed
        "500":
          description: something unusual has happened
      summary: Popular movies
      tags:
      - collections
  /v1/recommendation_film:
    get:
      description: Getting a recommended movie for the user
      produces:
      - application/json
      responses:
        "200":
          description: returns recommendation film movies for auth user or not auth
          schema:
            $ref: '#/definitions/models.RecommendFilmResponse'
        "400":
          description: return error
        "405":
          description: method not allowed
        "500":
          description: something unusual has happened
      summary: Recommendation film
      tags:
      - films
swagger: "2.0"
