name: deploy

on:
  pull_request:
    branches:
      - deploy
  push:
    branches:
      - deploy

jobs:
  linter:
    name: Run linter
    runs-on: ubuntu-20.04
    container:
      image: lonkidely/golang_web_light
    steps:
      - uses: actions/checkout@v2
      - run: make run-linter

  tests:
    needs: linter
    name: Run tests
    runs-on: ubuntu-20.04
    container:
      image: lonkidely/golang_web_light
    steps:
      - uses: actions/checkout@v2
      - run: make run-tests

  build:
    needs: tests
    name: Build
    runs-on: ubuntu-20.04
    container:
      image: lonkidely/golang_web_light
    steps:
      - uses: actions/checkout@v2
      - run: make build
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: cmd/*/*_bin

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-20.04
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      - name: Stop backend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            cd /home/webapps/movie-gate.online/backend/2022_2_BugOverload
            make stop
            make clear

      - name: Update backend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            git pull

      - name: Transfer binaries to server
        uses: appleboy/scp-action@v0.0.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: binaries
          target: /home/webapps/movie-gate.online/backend/2022_2_BugOverload/bin/
          strip_components: 1

      - name: Run backend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            make prod-deploy
