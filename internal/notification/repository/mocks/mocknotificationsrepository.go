// Code generated by MockGen. DO NOT EDIT.
// Source: notificationspgx.go

// Package mockNotificationsRepository is a generated GoMock package.
package mockNotificationsRepository

import (
	context "context"
	models "go-park-mail-ru/2022_2_BugOverload/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// GetFilmRelease mocks base method.
func (m *MockNotificationRepository) GetFilmRelease(ctx context.Context) ([]models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmRelease", ctx)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmRelease indicates an expected call of GetFilmRelease.
func (mr *MockNotificationRepositoryMockRecorder) GetFilmRelease(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmRelease", reflect.TypeOf((*MockNotificationRepository)(nil).GetFilmRelease), ctx)
}
