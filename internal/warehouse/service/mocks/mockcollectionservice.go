// Code generated by MockGen. DO NOT EDIT.
// Source: collectionservice.go

// Package mockWarehouseService is a generated GoMock package.
package mockWarehouseService

import (
	context "context"
	models "go-park-mail-ru/2022_2_BugOverload/internal/models"
	constparams "go-park-mail-ru/2022_2_BugOverload/internal/pkg/constparams"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCollectionService is a mock of CollectionService interface.
type MockCollectionService struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionServiceMockRecorder
}

// MockCollectionServiceMockRecorder is the mock recorder for MockCollectionService.
type MockCollectionServiceMockRecorder struct {
	mock *MockCollectionService
}

// NewMockCollectionService creates a new mock instance.
func NewMockCollectionService(ctrl *gomock.Controller) *MockCollectionService {
	mock := &MockCollectionService{ctrl: ctrl}
	mock.recorder = &MockCollectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionService) EXPECT() *MockCollectionServiceMockRecorder {
	return m.recorder
}

// GetCollectionAuthorized mocks base method.
func (m *MockCollectionService) GetCollectionAuthorized(ctx context.Context, user *models.User, params *constparams.CollectionGetFilmsRequestParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionAuthorized", ctx, user, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionAuthorized indicates an expected call of GetCollectionAuthorized.
func (mr *MockCollectionServiceMockRecorder) GetCollectionAuthorized(ctx, user, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionAuthorized", reflect.TypeOf((*MockCollectionService)(nil).GetCollectionAuthorized), ctx, user, params)
}

// GetCollectionByGenre mocks base method.
func (m *MockCollectionService) GetCollectionByGenre(ctx context.Context, params *constparams.GetStdCollectionParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionByGenre", ctx, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionByGenre indicates an expected call of GetCollectionByGenre.
func (mr *MockCollectionServiceMockRecorder) GetCollectionByGenre(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionByGenre", reflect.TypeOf((*MockCollectionService)(nil).GetCollectionByGenre), ctx, params)
}

// GetCollectionByTag mocks base method.
func (m *MockCollectionService) GetCollectionByTag(ctx context.Context, params *constparams.GetStdCollectionParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionByTag", ctx, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionByTag indicates an expected call of GetCollectionByTag.
func (mr *MockCollectionServiceMockRecorder) GetCollectionByTag(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionByTag", reflect.TypeOf((*MockCollectionService)(nil).GetCollectionByTag), ctx, params)
}

// GetCollectionNotAuthorized mocks base method.
func (m *MockCollectionService) GetCollectionNotAuthorized(ctx context.Context, params *constparams.CollectionGetFilmsRequestParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionNotAuthorized", ctx, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionNotAuthorized indicates an expected call of GetCollectionNotAuthorized.
func (mr *MockCollectionServiceMockRecorder) GetCollectionNotAuthorized(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionNotAuthorized", reflect.TypeOf((*MockCollectionService)(nil).GetCollectionNotAuthorized), ctx, params)
}

// GetPremieresCollection mocks base method.
func (m *MockCollectionService) GetPremieresCollection(ctx context.Context, params *constparams.GetPremiersCollectionParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPremieresCollection", ctx, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPremieresCollection indicates an expected call of GetPremieresCollection.
func (mr *MockCollectionServiceMockRecorder) GetPremieresCollection(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPremieresCollection", reflect.TypeOf((*MockCollectionService)(nil).GetPremieresCollection), ctx, params)
}

// GetSimilarFilms mocks base method.
func (m *MockCollectionService) GetSimilarFilms(ctx context.Context, params *constparams.GetSimilarFilmsParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimilarFilms", ctx, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSimilarFilms indicates an expected call of GetSimilarFilms.
func (mr *MockCollectionServiceMockRecorder) GetSimilarFilms(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimilarFilms", reflect.TypeOf((*MockCollectionService)(nil).GetSimilarFilms), ctx, params)
}

// GetStdCollection mocks base method.
func (m *MockCollectionService) GetStdCollection(ctx context.Context, params *constparams.GetStdCollectionParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStdCollection", ctx, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStdCollection indicates an expected call of GetStdCollection.
func (mr *MockCollectionServiceMockRecorder) GetStdCollection(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStdCollection", reflect.TypeOf((*MockCollectionService)(nil).GetStdCollection), ctx, params)
}
