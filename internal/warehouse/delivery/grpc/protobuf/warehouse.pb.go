// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: warehouse.proto

package warehouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// User
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Nickname         string `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Email            string `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	Password         string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	IsAdmin          bool   `protobuf:"varint,5,opt,name=IsAdmin,proto3" json:"IsAdmin,omitempty"`
	Avatar           string `protobuf:"bytes,6,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	JoinedDate       string `protobuf:"bytes,7,opt,name=JoinedDate,proto3" json:"JoinedDate,omitempty"`
	CountViewsFilms  uint32 `protobuf:"varint,8,opt,name=CountViewsFilms,proto3" json:"CountViewsFilms,omitempty"`
	CountCollections uint32 `protobuf:"varint,9,opt,name=CountCollections,proto3" json:"CountCollections,omitempty"`
	CountReviews     uint32 `protobuf:"varint,10,opt,name=CountReviews,proto3" json:"CountReviews,omitempty"`
	CountRatings     uint32 `protobuf:"varint,11,opt,name=CountRatings,proto3" json:"CountRatings,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetJoinedDate() string {
	if x != nil {
		return x.JoinedDate
	}
	return ""
}

func (x *User) GetCountViewsFilms() uint32 {
	if x != nil {
		return x.CountViewsFilms
	}
	return 0
}

func (x *User) GetCountCollections() uint32 {
	if x != nil {
		return x.CountCollections
	}
	return 0
}

func (x *User) GetCountReviews() uint32 {
	if x != nil {
		return x.CountReviews
	}
	return 0
}

func (x *User) GetCountRatings() uint32 {
	if x != nil {
		return x.CountRatings
	}
	return 0
}

// Film
type FilmActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Avatar    string `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Character string `protobuf:"bytes,4,opt,name=Character,proto3" json:"Character,omitempty"`
}

func (x *FilmActor) Reset() {
	*x = FilmActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmActor) ProtoMessage() {}

func (x *FilmActor) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmActor.ProtoReflect.Descriptor instead.
func (*FilmActor) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{1}
}

func (x *FilmActor) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *FilmActor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilmActor) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *FilmActor) GetCharacter() string {
	if x != nil {
		return x.Character
	}
	return ""
}

type FilmPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *FilmPerson) Reset() {
	*x = FilmPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmPerson) ProtoMessage() {}

func (x *FilmPerson) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmPerson.ProtoReflect.Descriptor instead.
func (*FilmPerson) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{2}
}

func (x *FilmPerson) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *FilmPerson) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Film struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   uint32        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	OriginalName         string        `protobuf:"bytes,3,opt,name=OriginalName,proto3" json:"OriginalName,omitempty"`
	ProdDate             string        `protobuf:"bytes,4,opt,name=ProdDate,proto3" json:"ProdDate,omitempty"`
	Slogan               string        `protobuf:"bytes,5,opt,name=Slogan,proto3" json:"Slogan,omitempty"`
	ShortDescription     string        `protobuf:"bytes,6,opt,name=ShortDescription,proto3" json:"ShortDescription,omitempty"`
	Description          string        `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	AgeLimit             string        `protobuf:"bytes,8,opt,name=AgeLimit,proto3" json:"AgeLimit,omitempty"`
	DurationMinutes      uint32        `protobuf:"varint,9,opt,name=DurationMinutes,proto3" json:"DurationMinutes,omitempty"`
	PosterHor            string        `protobuf:"bytes,10,opt,name=PosterHor,proto3" json:"PosterHor,omitempty"`
	PosterVer            string        `protobuf:"bytes,11,opt,name=PosterVer,proto3" json:"PosterVer,omitempty"`
	BoxOfficeDollars     uint32        `protobuf:"varint,12,opt,name=BoxOfficeDollars,proto3" json:"BoxOfficeDollars,omitempty"`
	Budget               uint32        `protobuf:"varint,13,opt,name=Budget,proto3" json:"Budget,omitempty"`
	CurrencyBudget       string        `protobuf:"bytes,14,opt,name=CurrencyBudget,proto3" json:"CurrencyBudget,omitempty"`
	CountSeasons         uint32        `protobuf:"varint,15,opt,name=CountSeasons,proto3" json:"CountSeasons,omitempty"`
	EndYear              string        `protobuf:"bytes,16,opt,name=EndYear,proto3" json:"EndYear,omitempty"`
	Type                 string        `protobuf:"bytes,17,opt,name=Type,proto3" json:"Type,omitempty"`
	Rating               float32       `protobuf:"fixed32,18,opt,name=Rating,proto3" json:"Rating,omitempty"`
	CountRatings         uint32        `protobuf:"varint,19,opt,name=CountRatings,proto3" json:"CountRatings,omitempty"`
	CountActors          uint32        `protobuf:"varint,20,opt,name=CountActors,proto3" json:"CountActors,omitempty"`
	CountNegativeReviews uint32        `protobuf:"varint,21,opt,name=CountNegativeReviews,proto3" json:"CountNegativeReviews,omitempty"`
	CountNeutralReviews  uint32        `protobuf:"varint,22,opt,name=CountNeutralReviews,proto3" json:"CountNeutralReviews,omitempty"`
	CountPositiveReviews uint32        `protobuf:"varint,23,opt,name=CountPositiveReviews,proto3" json:"CountPositiveReviews,omitempty"`
	Tags                 []string      `protobuf:"bytes,24,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Genres               []string      `protobuf:"bytes,25,rep,name=Genres,proto3" json:"Genres,omitempty"`
	ProdCompanies        []string      `protobuf:"bytes,26,rep,name=ProdCompanies,proto3" json:"ProdCompanies,omitempty"`
	ProdCountries        []string      `protobuf:"bytes,27,rep,name=ProdCountries,proto3" json:"ProdCountries,omitempty"`
	Actors               []*FilmActor  `protobuf:"bytes,28,rep,name=Actors,proto3" json:"Actors,omitempty"`
	Artists              []*FilmPerson `protobuf:"bytes,29,rep,name=Artists,proto3" json:"Artists,omitempty"`
	Directors            []*FilmPerson `protobuf:"bytes,30,rep,name=Directors,proto3" json:"Directors,omitempty"`
	Writers              []*FilmPerson `protobuf:"bytes,31,rep,name=Writers,proto3" json:"Writers,omitempty"`
	Producers            []*FilmPerson `protobuf:"bytes,32,rep,name=Producers,proto3" json:"Producers,omitempty"`
	Operators            []*FilmPerson `protobuf:"bytes,33,rep,name=Operators,proto3" json:"Operators,omitempty"`
	Montage              []*FilmPerson `protobuf:"bytes,34,rep,name=Montage,proto3" json:"Montage,omitempty"`
	Composers            []*FilmPerson `protobuf:"bytes,35,rep,name=Composers,proto3" json:"Composers,omitempty"`
	Images               []string      `protobuf:"bytes,36,rep,name=Images,proto3" json:"Images,omitempty"`
}

func (x *Film) Reset() {
	*x = Film{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Film) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Film) ProtoMessage() {}

func (x *Film) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Film.ProtoReflect.Descriptor instead.
func (*Film) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{3}
}

func (x *Film) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Film) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Film) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *Film) GetProdDate() string {
	if x != nil {
		return x.ProdDate
	}
	return ""
}

func (x *Film) GetSlogan() string {
	if x != nil {
		return x.Slogan
	}
	return ""
}

func (x *Film) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *Film) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Film) GetAgeLimit() string {
	if x != nil {
		return x.AgeLimit
	}
	return ""
}

func (x *Film) GetDurationMinutes() uint32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *Film) GetPosterHor() string {
	if x != nil {
		return x.PosterHor
	}
	return ""
}

func (x *Film) GetPosterVer() string {
	if x != nil {
		return x.PosterVer
	}
	return ""
}

func (x *Film) GetBoxOfficeDollars() uint32 {
	if x != nil {
		return x.BoxOfficeDollars
	}
	return 0
}

func (x *Film) GetBudget() uint32 {
	if x != nil {
		return x.Budget
	}
	return 0
}

func (x *Film) GetCurrencyBudget() string {
	if x != nil {
		return x.CurrencyBudget
	}
	return ""
}

func (x *Film) GetCountSeasons() uint32 {
	if x != nil {
		return x.CountSeasons
	}
	return 0
}

func (x *Film) GetEndYear() string {
	if x != nil {
		return x.EndYear
	}
	return ""
}

func (x *Film) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Film) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Film) GetCountRatings() uint32 {
	if x != nil {
		return x.CountRatings
	}
	return 0
}

func (x *Film) GetCountActors() uint32 {
	if x != nil {
		return x.CountActors
	}
	return 0
}

func (x *Film) GetCountNegativeReviews() uint32 {
	if x != nil {
		return x.CountNegativeReviews
	}
	return 0
}

func (x *Film) GetCountNeutralReviews() uint32 {
	if x != nil {
		return x.CountNeutralReviews
	}
	return 0
}

func (x *Film) GetCountPositiveReviews() uint32 {
	if x != nil {
		return x.CountPositiveReviews
	}
	return 0
}

func (x *Film) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Film) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Film) GetProdCompanies() []string {
	if x != nil {
		return x.ProdCompanies
	}
	return nil
}

func (x *Film) GetProdCountries() []string {
	if x != nil {
		return x.ProdCountries
	}
	return nil
}

func (x *Film) GetActors() []*FilmActor {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *Film) GetArtists() []*FilmPerson {
	if x != nil {
		return x.Artists
	}
	return nil
}

func (x *Film) GetDirectors() []*FilmPerson {
	if x != nil {
		return x.Directors
	}
	return nil
}

func (x *Film) GetWriters() []*FilmPerson {
	if x != nil {
		return x.Writers
	}
	return nil
}

func (x *Film) GetProducers() []*FilmPerson {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *Film) GetOperators() []*FilmPerson {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *Film) GetMontage() []*FilmPerson {
	if x != nil {
		return x.Montage
	}
	return nil
}

func (x *Film) GetComposers() []*FilmPerson {
	if x != nil {
		return x.Composers
	}
	return nil
}

func (x *Film) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

type GetFilmParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilmID      uint32 `protobuf:"varint,1,opt,name=FilmID,proto3" json:"FilmID,omitempty"`
	CountImages uint32 `protobuf:"varint,2,opt,name=CountImages,proto3" json:"CountImages,omitempty"`
	CountActors uint32 `protobuf:"varint,3,opt,name=CountActors,proto3" json:"CountActors,omitempty"`
}

func (x *GetFilmParams) Reset() {
	*x = GetFilmParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilmParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilmParams) ProtoMessage() {}

func (x *GetFilmParams) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilmParams.ProtoReflect.Descriptor instead.
func (*GetFilmParams) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{4}
}

func (x *GetFilmParams) GetFilmID() uint32 {
	if x != nil {
		return x.FilmID
	}
	return 0
}

func (x *GetFilmParams) GetCountImages() uint32 {
	if x != nil {
		return x.CountImages
	}
	return 0
}

func (x *GetFilmParams) GetCountActors() uint32 {
	if x != nil {
		return x.CountActors
	}
	return 0
}

type Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type       string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Body       string `protobuf:"bytes,4,opt,name=Body,proto3" json:"Body,omitempty"`
	CountLikes uint32 `protobuf:"varint,5,opt,name=CountLikes,proto3" json:"CountLikes,omitempty"`
	CreateTime string `protobuf:"bytes,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	Author     *User  `protobuf:"bytes,7,opt,name=Author,proto3" json:"Author,omitempty"`
}

func (x *Review) Reset() {
	*x = Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Review) ProtoMessage() {}

func (x *Review) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Review.ProtoReflect.Descriptor instead.
func (*Review) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{5}
}

func (x *Review) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Review) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Review) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Review) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Review) GetCountLikes() uint32 {
	if x != nil {
		return x.CountLikes
	}
	return 0
}

func (x *Review) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Review) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

type Reviews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reviews []*Review `protobuf:"bytes,1,rep,name=Reviews,proto3" json:"Reviews,omitempty"`
}

func (x *Reviews) Reset() {
	*x = Reviews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reviews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reviews) ProtoMessage() {}

func (x *Reviews) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reviews.ProtoReflect.Descriptor instead.
func (*Reviews) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{6}
}

func (x *Reviews) GetReviews() []*Review {
	if x != nil {
		return x.Reviews
	}
	return nil
}

type GetFilmReviewsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilmID       uint32 `protobuf:"varint,1,opt,name=FilmID,proto3" json:"FilmID,omitempty"`
	CountReviews uint32 `protobuf:"varint,2,opt,name=CountReviews,proto3" json:"CountReviews,omitempty"`
	Offset       uint32 `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (x *GetFilmReviewsParams) Reset() {
	*x = GetFilmReviewsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilmReviewsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilmReviewsParams) ProtoMessage() {}

func (x *GetFilmReviewsParams) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilmReviewsParams.ProtoReflect.Descriptor instead.
func (*GetFilmReviewsParams) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{7}
}

func (x *GetFilmReviewsParams) GetFilmID() uint32 {
	if x != nil {
		return x.FilmID
	}
	return 0
}

func (x *GetFilmReviewsParams) GetCountReviews() uint32 {
	if x != nil {
		return x.CountReviews
	}
	return 0
}

func (x *GetFilmReviewsParams) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Collection
type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Poster      string  `protobuf:"bytes,4,opt,name=Poster,proto3" json:"Poster,omitempty"`
	Time        string  `protobuf:"bytes,5,opt,name=Time,proto3" json:"Time,omitempty"`
	Films       []*Film `protobuf:"bytes,6,rep,name=Films,proto3" json:"Films,omitempty"`
	CountLikes  uint32  `protobuf:"varint,7,opt,name=CountLikes,proto3" json:"CountLikes,omitempty"`
	CountFilms  uint32  `protobuf:"varint,8,opt,name=CountFilms,proto3" json:"CountFilms,omitempty"`
	UpdateTime  string  `protobuf:"bytes,9,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	CreateTime  string  `protobuf:"bytes,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	Author      *User   `protobuf:"bytes,11,opt,name=Author,proto3" json:"Author,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{8}
}

func (x *Collection) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Collection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Collection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Collection) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *Collection) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Collection) GetFilms() []*Film {
	if x != nil {
		return x.Films
	}
	return nil
}

func (x *Collection) GetCountLikes() uint32 {
	if x != nil {
		return x.CountLikes
	}
	return 0
}

func (x *Collection) GetCountFilms() uint32 {
	if x != nil {
		return x.CountFilms
	}
	return 0
}

func (x *Collection) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Collection) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Collection) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

type GetStdCollectionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target     string `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	Key        string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	SortParam  string `protobuf:"bytes,3,opt,name=SortParam,proto3" json:"SortParam,omitempty"`
	CountFilms uint32 `protobuf:"varint,4,opt,name=CountFilms,proto3" json:"CountFilms,omitempty"`
	Delimiter  string `protobuf:"bytes,5,opt,name=Delimiter,proto3" json:"Delimiter,omitempty"`
}

func (x *GetStdCollectionParams) Reset() {
	*x = GetStdCollectionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStdCollectionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStdCollectionParams) ProtoMessage() {}

func (x *GetStdCollectionParams) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStdCollectionParams.ProtoReflect.Descriptor instead.
func (*GetStdCollectionParams) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{9}
}

func (x *GetStdCollectionParams) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *GetStdCollectionParams) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetStdCollectionParams) GetSortParam() string {
	if x != nil {
		return x.SortParam
	}
	return ""
}

func (x *GetStdCollectionParams) GetCountFilms() uint32 {
	if x != nil {
		return x.CountFilms
	}
	return 0
}

func (x *GetStdCollectionParams) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

type PremiersCollectionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountFilms uint32 `protobuf:"varint,1,opt,name=CountFilms,proto3" json:"CountFilms,omitempty"`
	Delimiter  uint32 `protobuf:"varint,2,opt,name=Delimiter,proto3" json:"Delimiter,omitempty"`
}

func (x *PremiersCollectionParams) Reset() {
	*x = PremiersCollectionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PremiersCollectionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PremiersCollectionParams) ProtoMessage() {}

func (x *PremiersCollectionParams) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PremiersCollectionParams.ProtoReflect.Descriptor instead.
func (*PremiersCollectionParams) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{10}
}

func (x *PremiersCollectionParams) GetCountFilms() uint32 {
	if x != nil {
		return x.CountFilms
	}
	return 0
}

func (x *PremiersCollectionParams) GetDelimiter() uint32 {
	if x != nil {
		return x.Delimiter
	}
	return 0
}

type CollectionGetFilmsAuthParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionID  uint32 `protobuf:"varint,1,opt,name=CollectionID,proto3" json:"CollectionID,omitempty"`
	SortParam     string `protobuf:"bytes,2,opt,name=SortParam,proto3" json:"SortParam,omitempty"`
	RequestedUser *User  `protobuf:"bytes,3,opt,name=RequestedUser,proto3" json:"RequestedUser,omitempty"`
}

func (x *CollectionGetFilmsAuthParams) Reset() {
	*x = CollectionGetFilmsAuthParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionGetFilmsAuthParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionGetFilmsAuthParams) ProtoMessage() {}

func (x *CollectionGetFilmsAuthParams) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionGetFilmsAuthParams.ProtoReflect.Descriptor instead.
func (*CollectionGetFilmsAuthParams) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{11}
}

func (x *CollectionGetFilmsAuthParams) GetCollectionID() uint32 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *CollectionGetFilmsAuthParams) GetSortParam() string {
	if x != nil {
		return x.SortParam
	}
	return ""
}

func (x *CollectionGetFilmsAuthParams) GetRequestedUser() *User {
	if x != nil {
		return x.RequestedUser
	}
	return nil
}

type CollectionGetFilmsNotAuthParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionID uint32 `protobuf:"varint,1,opt,name=CollectionID,proto3" json:"CollectionID,omitempty"`
	SortParam    string `protobuf:"bytes,2,opt,name=SortParam,proto3" json:"SortParam,omitempty"`
}

func (x *CollectionGetFilmsNotAuthParams) Reset() {
	*x = CollectionGetFilmsNotAuthParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionGetFilmsNotAuthParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionGetFilmsNotAuthParams) ProtoMessage() {}

func (x *CollectionGetFilmsNotAuthParams) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionGetFilmsNotAuthParams.ProtoReflect.Descriptor instead.
func (*CollectionGetFilmsNotAuthParams) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{12}
}

func (x *CollectionGetFilmsNotAuthParams) GetCollectionID() uint32 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *CollectionGetFilmsNotAuthParams) GetSortParam() string {
	if x != nil {
		return x.SortParam
	}
	return ""
}

// Person
type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	OriginalName string   `protobuf:"bytes,3,opt,name=OriginalName,proto3" json:"OriginalName,omitempty"`
	Birthday     string   `protobuf:"bytes,4,opt,name=Birthday,proto3" json:"Birthday,omitempty"`
	Avatar       string   `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Death        string   `protobuf:"bytes,6,opt,name=Death,proto3" json:"Death,omitempty"`
	Growth       float32  `protobuf:"fixed32,7,opt,name=Growth,proto3" json:"Growth,omitempty"`
	Gender       string   `protobuf:"bytes,8,opt,name=Gender,proto3" json:"Gender,omitempty"`
	CountFilms   uint32   `protobuf:"varint,9,opt,name=CountFilms,proto3" json:"CountFilms,omitempty"`
	Professions  []string `protobuf:"bytes,10,rep,name=Professions,proto3" json:"Professions,omitempty"`
	Genres       []string `protobuf:"bytes,11,rep,name=Genres,proto3" json:"Genres,omitempty"`
	BestFilms    []*Film  `protobuf:"bytes,12,rep,name=BestFilms,proto3" json:"BestFilms,omitempty"`
	Images       []string `protobuf:"bytes,13,rep,name=Images,proto3" json:"Images,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{13}
}

func (x *Person) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *Person) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *Person) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Person) GetDeath() string {
	if x != nil {
		return x.Death
	}
	return ""
}

func (x *Person) GetGrowth() float32 {
	if x != nil {
		return x.Growth
	}
	return 0
}

func (x *Person) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Person) GetCountFilms() uint32 {
	if x != nil {
		return x.CountFilms
	}
	return 0
}

func (x *Person) GetProfessions() []string {
	if x != nil {
		return x.Professions
	}
	return nil
}

func (x *Person) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Person) GetBestFilms() []*Film {
	if x != nil {
		return x.BestFilms
	}
	return nil
}

func (x *Person) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

type GetPersonParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonID    uint32 `protobuf:"varint,1,opt,name=PersonID,proto3" json:"PersonID,omitempty"`
	CountFilms  uint32 `protobuf:"varint,2,opt,name=CountFilms,proto3" json:"CountFilms,omitempty"`
	CountImages uint32 `protobuf:"varint,3,opt,name=CountImages,proto3" json:"CountImages,omitempty"`
}

func (x *GetPersonParams) Reset() {
	*x = GetPersonParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonParams) ProtoMessage() {}

func (x *GetPersonParams) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonParams.ProtoReflect.Descriptor instead.
func (*GetPersonParams) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{14}
}

func (x *GetPersonParams) GetPersonID() uint32 {
	if x != nil {
		return x.PersonID
	}
	return 0
}

func (x *GetPersonParams) GetCountFilms() uint32 {
	if x != nil {
		return x.CountFilms
	}
	return 0
}

func (x *GetPersonParams) GetCountImages() uint32 {
	if x != nil {
		return x.CountImages
	}
	return 0
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy bool `protobuf:"varint,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{15}
}

func (x *Nothing) GetDummy() bool {
	if x != nil {
		return x.Dummy
	}
	return false
}

type SearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (x *SearchParams) Reset() {
	*x = SearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParams) ProtoMessage() {}

func (x *SearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParams.ProtoReflect.Descriptor instead.
func (*SearchParams) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{16}
}

func (x *SearchParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Films   []*Film   `protobuf:"bytes,1,rep,name=Films,proto3" json:"Films,omitempty"`
	Series  []*Film   `protobuf:"bytes,2,rep,name=Serials,proto3" json:"Serials,omitempty"`
	Persons []*Person `protobuf:"bytes,3,rep,name=Persons,proto3" json:"Persons,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warehouse_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warehouse_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_warehouse_proto_rawDescGZIP(), []int{17}
}

func (x *SearchResponse) GetFilms() []*Film {
	if x != nil {
		return x.Films
	}
	return nil
}

func (x *SearchResponse) GetSeries() []*Film {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *SearchResponse) GetPersons() []*Person {
	if x != nil {
		return x.Persons
	}
	return nil
}

var File_warehouse_proto protoreflect.FileDescriptor

var file_warehouse_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x22, 0xd4, 0x02, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x65, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x6d, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x6d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x0a, 0x0a,
	0x04, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x72, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6c, 0x6f,
	0x67, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6c, 0x6f, 0x67, 0x61,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x41, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x41, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x6f, 0x78, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x44, 0x6f,
	0x6c, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x42, 0x6f, 0x78,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x47, 0x65, 0x6e,
	0x72, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a,
	0x07, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x6d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f,
	0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x33, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x18, 0x23, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x6d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x24,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x07, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x22, 0x6a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x6d, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xce, 0x02,
	0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x05,
	0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6b, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x9e,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6d,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22,
	0x58, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x1f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f,
	0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xeb, 0x02, 0x0a, 0x06, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x44, 0x65, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x09, 0x42, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x6d, 0x52, 0x09, 0x42, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x22, 0x24, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x8d,
	0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x6d, 0x52, 0x05, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x32, 0xcb,
	0x05, 0x0a, 0x10, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0x0f, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x42, 0x79, 0x49, 0x44, 0x12, 0x18,
	0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x6d, 0x49,
	0x44, 0x12, 0x1f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x12, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x15, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x50,
	0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x15, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x27, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x15, 0x2e, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x15, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x2e, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x19, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b,
	0x2e, 0x3b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_warehouse_proto_rawDescOnce sync.Once
	file_warehouse_proto_rawDescData = file_warehouse_proto_rawDesc
)

func file_warehouse_proto_rawDescGZIP() []byte {
	file_warehouse_proto_rawDescOnce.Do(func() {
		file_warehouse_proto_rawDescData = protoimpl.X.CompressGZIP(file_warehouse_proto_rawDescData)
	})
	return file_warehouse_proto_rawDescData
}

var file_warehouse_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_warehouse_proto_goTypes = []interface{}{
	(*User)(nil),                            // 0: warehouse.User
	(*FilmActor)(nil),                       // 1: warehouse.FilmActor
	(*FilmPerson)(nil),                      // 2: warehouse.FilmPerson
	(*Film)(nil),                            // 3: warehouse.Film
	(*GetFilmParams)(nil),                   // 4: warehouse.GetFilmParams
	(*Review)(nil),                          // 5: warehouse.Review
	(*Reviews)(nil),                         // 6: warehouse.Reviews
	(*GetFilmReviewsParams)(nil),            // 7: warehouse.GetFilmReviewsParams
	(*Collection)(nil),                      // 8: warehouse.Collection
	(*GetStdCollectionParams)(nil),          // 9: warehouse.GetStdCollectionParams
	(*PremiersCollectionParams)(nil),        // 10: warehouse.PremiersCollectionParams
	(*CollectionGetFilmsAuthParams)(nil),    // 11: warehouse.CollectionGetFilmsAuthParams
	(*CollectionGetFilmsNotAuthParams)(nil), // 12: warehouse.CollectionGetFilmsNotAuthParams
	(*Person)(nil),                          // 13: warehouse.Person
	(*GetPersonParams)(nil),                 // 14: warehouse.GetPersonParams
	(*Nothing)(nil),                         // 15: warehouse.Nothing
	(*SearchParams)(nil),                    // 16: warehouse.SearchParams
	(*SearchResponse)(nil),                  // 17: warehouse.SearchResponse
}
var file_warehouse_proto_depIdxs = []int32{
	1,  // 0: warehouse.Film.Actors:type_name -> warehouse.FilmActor
	2,  // 1: warehouse.Film.Artists:type_name -> warehouse.FilmPerson
	2,  // 2: warehouse.Film.Directors:type_name -> warehouse.FilmPerson
	2,  // 3: warehouse.Film.Writers:type_name -> warehouse.FilmPerson
	2,  // 4: warehouse.Film.Producers:type_name -> warehouse.FilmPerson
	2,  // 5: warehouse.Film.Operators:type_name -> warehouse.FilmPerson
	2,  // 6: warehouse.Film.Montage:type_name -> warehouse.FilmPerson
	2,  // 7: warehouse.Film.Composers:type_name -> warehouse.FilmPerson
	0,  // 8: warehouse.Review.Author:type_name -> warehouse.User
	5,  // 9: warehouse.Reviews.Reviews:type_name -> warehouse.Review
	3,  // 10: warehouse.Collection.Films:type_name -> warehouse.Film
	0,  // 11: warehouse.Collection.Author:type_name -> warehouse.User
	0,  // 12: warehouse.CollectionGetFilmsAuthParams.RequestedUser:type_name -> warehouse.User
	3,  // 13: warehouse.Person.BestFilms:type_name -> warehouse.Film
	3,  // 14: warehouse.SearchResponse.Films:type_name -> warehouse.Film
	3,  // 15: warehouse.SearchResponse.Serials:type_name -> warehouse.Film
	13, // 16: warehouse.SearchResponse.Persons:type_name -> warehouse.Person
	15, // 17: warehouse.WarehouseService.GetRecommendation:input_type -> warehouse.Nothing
	4,  // 18: warehouse.WarehouseService.GetFilmByID:input_type -> warehouse.GetFilmParams
	7,  // 19: warehouse.WarehouseService.GetReviewsByFilmID:input_type -> warehouse.GetFilmReviewsParams
	9,  // 20: warehouse.WarehouseService.GetStdCollection:input_type -> warehouse.GetStdCollectionParams
	10, // 21: warehouse.WarehouseService.GetPremieresCollection:input_type -> warehouse.PremiersCollectionParams
	11, // 22: warehouse.WarehouseService.GetCollectionFilmsAuthorized:input_type -> warehouse.CollectionGetFilmsAuthParams
	12, // 23: warehouse.WarehouseService.GetCollectionFilmsNotAuthorized:input_type -> warehouse.CollectionGetFilmsNotAuthParams
	14, // 24: warehouse.WarehouseService.GetPersonByID:input_type -> warehouse.GetPersonParams
	16, // 25: warehouse.WarehouseService.Search:input_type -> warehouse.SearchParams
	3,  // 26: warehouse.WarehouseService.GetRecommendation:output_type -> warehouse.Film
	3,  // 27: warehouse.WarehouseService.GetFilmByID:output_type -> warehouse.Film
	6,  // 28: warehouse.WarehouseService.GetReviewsByFilmID:output_type -> warehouse.Reviews
	8,  // 29: warehouse.WarehouseService.GetStdCollection:output_type -> warehouse.Collection
	8,  // 30: warehouse.WarehouseService.GetPremieresCollection:output_type -> warehouse.Collection
	8,  // 31: warehouse.WarehouseService.GetCollectionFilmsAuthorized:output_type -> warehouse.Collection
	8,  // 32: warehouse.WarehouseService.GetCollectionFilmsNotAuthorized:output_type -> warehouse.Collection
	13, // 33: warehouse.WarehouseService.GetPersonByID:output_type -> warehouse.Person
	17, // 34: warehouse.WarehouseService.Search:output_type -> warehouse.SearchResponse
	26, // [26:35] is the sub-list for method output_type
	17, // [17:26] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_warehouse_proto_init() }
func file_warehouse_proto_init() {
	if File_warehouse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_warehouse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Film); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilmParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reviews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilmReviewsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStdCollectionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PremiersCollectionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionGetFilmsAuthParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionGetFilmsNotAuthParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_warehouse_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_warehouse_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_warehouse_proto_goTypes,
		DependencyIndexes: file_warehouse_proto_depIdxs,
		MessageInfos:      file_warehouse_proto_msgTypes,
	}.Build()
	File_warehouse_proto = out.File
	file_warehouse_proto_rawDesc = nil
	file_warehouse_proto_goTypes = nil
	file_warehouse_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WarehouseServiceClient is the client API for WarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WarehouseServiceClient interface {
	// Film
	GetRecommendation(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Film, error)
	GetFilmByID(ctx context.Context, in *GetFilmParams, opts ...grpc.CallOption) (*Film, error)
	GetReviewsByFilmID(ctx context.Context, in *GetFilmReviewsParams, opts ...grpc.CallOption) (*Reviews, error)
	// Collection
	GetStdCollection(ctx context.Context, in *GetStdCollectionParams, opts ...grpc.CallOption) (*Collection, error)
	GetPremieresCollection(ctx context.Context, in *PremiersCollectionParams, opts ...grpc.CallOption) (*Collection, error)
	GetCollectionFilmsAuthorized(ctx context.Context, in *CollectionGetFilmsAuthParams, opts ...grpc.CallOption) (*Collection, error)
	GetCollectionFilmsNotAuthorized(ctx context.Context, in *CollectionGetFilmsNotAuthParams, opts ...grpc.CallOption) (*Collection, error)
	// Person
	GetPersonByID(ctx context.Context, in *GetPersonParams, opts ...grpc.CallOption) (*Person, error)
	// Search
	Search(ctx context.Context, in *SearchParams, opts ...grpc.CallOption) (*SearchResponse, error)
}

type warehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseServiceClient(cc grpc.ClientConnInterface) WarehouseServiceClient {
	return &warehouseServiceClient{cc}
}

func (c *warehouseServiceClient) GetRecommendation(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Film, error) {
	out := new(Film)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseService/GetRecommendation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetFilmByID(ctx context.Context, in *GetFilmParams, opts ...grpc.CallOption) (*Film, error) {
	out := new(Film)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseService/GetFilmByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetReviewsByFilmID(ctx context.Context, in *GetFilmReviewsParams, opts ...grpc.CallOption) (*Reviews, error) {
	out := new(Reviews)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseService/GetReviewsByFilmID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetStdCollection(ctx context.Context, in *GetStdCollectionParams, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseService/GetStdCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetPremieresCollection(ctx context.Context, in *PremiersCollectionParams, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseService/GetPremieresCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetCollectionFilmsAuthorized(ctx context.Context, in *CollectionGetFilmsAuthParams, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseService/GetCollectionFilmsAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetCollectionFilmsNotAuthorized(ctx context.Context, in *CollectionGetFilmsNotAuthParams, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseService/GetCollectionFilmsNotAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetPersonByID(ctx context.Context, in *GetPersonParams, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseService/GetPersonByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) Search(ctx context.Context, in *SearchParams, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServiceServer is the server API for WarehouseService service.
type WarehouseServiceServer interface {
	// Film
	GetRecommendation(context.Context, *Nothing) (*Film, error)
	GetFilmByID(context.Context, *GetFilmParams) (*Film, error)
	GetReviewsByFilmID(context.Context, *GetFilmReviewsParams) (*Reviews, error)
	// Collection
	GetStdCollection(context.Context, *GetStdCollectionParams) (*Collection, error)
	GetPremieresCollection(context.Context, *PremiersCollectionParams) (*Collection, error)
	GetCollectionFilmsAuthorized(context.Context, *CollectionGetFilmsAuthParams) (*Collection, error)
	GetCollectionFilmsNotAuthorized(context.Context, *CollectionGetFilmsNotAuthParams) (*Collection, error)
	// Person
	GetPersonByID(context.Context, *GetPersonParams) (*Person, error)
	// Search
	Search(context.Context, *SearchParams) (*SearchResponse, error)
}

// UnimplementedWarehouseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWarehouseServiceServer struct {
}

func (*UnimplementedWarehouseServiceServer) GetRecommendation(context.Context, *Nothing) (*Film, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendation not implemented")
}
func (*UnimplementedWarehouseServiceServer) GetFilmByID(context.Context, *GetFilmParams) (*Film, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilmByID not implemented")
}
func (*UnimplementedWarehouseServiceServer) GetReviewsByFilmID(context.Context, *GetFilmReviewsParams) (*Reviews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewsByFilmID not implemented")
}
func (*UnimplementedWarehouseServiceServer) GetStdCollection(context.Context, *GetStdCollectionParams) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStdCollection not implemented")
}
func (*UnimplementedWarehouseServiceServer) GetPremieresCollection(context.Context, *PremiersCollectionParams) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPremieresCollection not implemented")
}
func (*UnimplementedWarehouseServiceServer) GetCollectionFilmsAuthorized(context.Context, *CollectionGetFilmsAuthParams) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionFilmsAuthorized not implemented")
}
func (*UnimplementedWarehouseServiceServer) GetCollectionFilmsNotAuthorized(context.Context, *CollectionGetFilmsNotAuthParams) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionFilmsNotAuthorized not implemented")
}
func (*UnimplementedWarehouseServiceServer) GetPersonByID(context.Context, *GetPersonParams) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonByID not implemented")
}
func (*UnimplementedWarehouseServiceServer) Search(context.Context, *SearchParams) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterWarehouseServiceServer(s *grpc.Server, srv WarehouseServiceServer) {
	s.RegisterService(&_WarehouseService_serviceDesc, srv)
}

func _WarehouseService_GetRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseService/GetRecommendation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetRecommendation(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetFilmByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetFilmByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseService/GetFilmByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetFilmByID(ctx, req.(*GetFilmParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetReviewsByFilmID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmReviewsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetReviewsByFilmID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseService/GetReviewsByFilmID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetReviewsByFilmID(ctx, req.(*GetFilmReviewsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetStdCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStdCollectionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetStdCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseService/GetStdCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetStdCollection(ctx, req.(*GetStdCollectionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetPremieresCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PremiersCollectionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetPremieresCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseService/GetPremieresCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetPremieresCollection(ctx, req.(*PremiersCollectionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetCollectionFilmsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionGetFilmsAuthParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetCollectionFilmsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseService/GetCollectionFilmsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetCollectionFilmsAuthorized(ctx, req.(*CollectionGetFilmsAuthParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetCollectionFilmsNotAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionGetFilmsNotAuthParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetCollectionFilmsNotAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseService/GetCollectionFilmsNotAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetCollectionFilmsNotAuthorized(ctx, req.(*CollectionGetFilmsNotAuthParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetPersonByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetPersonByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseService/GetPersonByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetPersonByID(ctx, req.(*GetPersonParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).Search(ctx, req.(*SearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _WarehouseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "warehouse.WarehouseService",
	HandlerType: (*WarehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecommendation",
			Handler:    _WarehouseService_GetRecommendation_Handler,
		},
		{
			MethodName: "GetFilmByID",
			Handler:    _WarehouseService_GetFilmByID_Handler,
		},
		{
			MethodName: "GetReviewsByFilmID",
			Handler:    _WarehouseService_GetReviewsByFilmID_Handler,
		},
		{
			MethodName: "GetStdCollection",
			Handler:    _WarehouseService_GetStdCollection_Handler,
		},
		{
			MethodName: "GetPremieresCollection",
			Handler:    _WarehouseService_GetPremieresCollection_Handler,
		},
		{
			MethodName: "GetCollectionFilmsAuthorized",
			Handler:    _WarehouseService_GetCollectionFilmsAuthorized_Handler,
		},
		{
			MethodName: "GetCollectionFilmsNotAuthorized",
			Handler:    _WarehouseService_GetCollectionFilmsNotAuthorized_Handler,
		},
		{
			MethodName: "GetPersonByID",
			Handler:    _WarehouseService_GetPersonByID_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _WarehouseService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warehouse.proto",
}
