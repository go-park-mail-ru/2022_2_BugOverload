// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mockWarehouseClient is a generated GoMock package.
package mockWarehouseClient

import (
	context "context"
	models "go-park-mail-ru/2022_2_BugOverload/internal/models"
	constparams "go-park-mail-ru/2022_2_BugOverload/internal/pkg/constparams"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWarehouseService is a mock of WarehouseService interface.
type MockWarehouseService struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseServiceMockRecorder
}

// MockWarehouseServiceMockRecorder is the mock recorder for MockWarehouseService.
type MockWarehouseServiceMockRecorder struct {
	mock *MockWarehouseService
}

// NewMockWarehouseService creates a new mock instance.
func NewMockWarehouseService(ctrl *gomock.Controller) *MockWarehouseService {
	mock := &MockWarehouseService{ctrl: ctrl}
	mock.recorder = &MockWarehouseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseService) EXPECT() *MockWarehouseServiceMockRecorder {
	return m.recorder
}

// GetCollectionFilmsAuthorized mocks base method.
func (m *MockWarehouseService) GetCollectionFilmsAuthorized(ctx context.Context, user *models.User, params *constparams.CollectionGetFilmsRequestParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionAuthorized", ctx, user, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionFilmsAuthorized indicates an expected call of GetCollectionFilmsAuthorized.
func (mr *MockWarehouseServiceMockRecorder) GetCollectionFilmsAuthorized(ctx, user, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionAuthorized", reflect.TypeOf((*MockWarehouseService)(nil).GetCollectionFilmsAuthorized), ctx, user, params)
}

// GetCollectionFilmsNotAuthorized mocks base method.
func (m *MockWarehouseService) GetCollectionFilmsNotAuthorized(ctx context.Context, params *constparams.CollectionGetFilmsRequestParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionNotAuthorized", ctx, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionFilmsNotAuthorized indicates an expected call of GetCollectionFilmsNotAuthorized.
func (mr *MockWarehouseServiceMockRecorder) GetCollectionFilmsNotAuthorized(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionNotAuthorized", reflect.TypeOf((*MockWarehouseService)(nil).GetCollectionFilmsNotAuthorized), ctx, params)
}

// GetFilmByID mocks base method.
func (m *MockWarehouseService) GetFilmByID(ctx context.Context, film *models.Film, params *constparams.GetFilmParams) (models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmByID", ctx, film, params)
	ret0, _ := ret[0].(models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmByID indicates an expected call of GetFilmByID.
func (mr *MockWarehouseServiceMockRecorder) GetFilmByID(ctx, film, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmByID", reflect.TypeOf((*MockWarehouseService)(nil).GetFilmByID), ctx, film, params)
}

// GetPersonByID mocks base method.
func (m *MockWarehouseService) GetPersonByID(ctx context.Context, person *models.Person, params *constparams.GetPersonParams) (models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonByID", ctx, person, params)
	ret0, _ := ret[0].(models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonByID indicates an expected call of GetPersonByID.
func (mr *MockWarehouseServiceMockRecorder) GetPersonByID(ctx, person, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonByID", reflect.TypeOf((*MockWarehouseService)(nil).GetPersonByID), ctx, person, params)
}

// GetPremieresCollection mocks base method.
func (m *MockWarehouseService) GetPremieresCollection(ctx context.Context, params *constparams.PremiersCollectionParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPremieresCollection", ctx, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPremieresCollection indicates an expected call of GetPremieresCollection.
func (mr *MockWarehouseServiceMockRecorder) GetPremieresCollection(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPremieresCollection", reflect.TypeOf((*MockWarehouseService)(nil).GetPremieresCollection), ctx, params)
}

// GetRecommendation mocks base method.
func (m *MockWarehouseService) GetRecommendation(ctx context.Context) (models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendation", ctx)
	ret0, _ := ret[0].(models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendation indicates an expected call of GetRecommendation.
func (mr *MockWarehouseServiceMockRecorder) GetRecommendation(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendation", reflect.TypeOf((*MockWarehouseService)(nil).GetRecommendation), ctx)
}

// GetReviewsByFilmID mocks base method.
func (m *MockWarehouseService) GetReviewsByFilmID(ctx context.Context, params *constparams.GetFilmReviewsParams) ([]models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByFilmID", ctx, params)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByFilmID indicates an expected call of GetReviewsByFilmID.
func (mr *MockWarehouseServiceMockRecorder) GetReviewsByFilmID(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByFilmID", reflect.TypeOf((*MockWarehouseService)(nil).GetReviewsByFilmID), ctx, params)
}

// GetStdCollection mocks base method.
func (m *MockWarehouseService) GetStdCollection(ctx context.Context, params *constparams.GetStdCollectionParams) (models.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStdCollection", ctx, params)
	ret0, _ := ret[0].(models.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStdCollection indicates an expected call of GetStdCollection.
func (mr *MockWarehouseServiceMockRecorder) GetStdCollection(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStdCollection", reflect.TypeOf((*MockWarehouseService)(nil).GetStdCollection), ctx, params)
}

// Search mocks base method.
func (m *MockWarehouseService) Search(ctx context.Context, params *constparams.SearchParams) (models.Search, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, params)
	ret0, _ := ret[0].(models.Search)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockWarehouseServiceMockRecorder) Search(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockWarehouseService)(nil).Search), ctx, params)
}
