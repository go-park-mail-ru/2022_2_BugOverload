// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson14b8084aDecodeGoParkMailRu20222BugOverloadInternalModels(in *jlexer.Lexer, out *FilmPerson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeGoParkMailRu20222BugOverloadInternalModels(out *jwriter.Writer, in FilmPerson) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmPerson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeGoParkMailRu20222BugOverloadInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmPerson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeGoParkMailRu20222BugOverloadInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmPerson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeGoParkMailRu20222BugOverloadInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmPerson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeGoParkMailRu20222BugOverloadInternalModels(l, v)
}
func easyjson14b8084aDecodeGoParkMailRu20222BugOverloadInternalModels1(in *jlexer.Lexer, out *FilmActor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "character":
			out.Character = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeGoParkMailRu20222BugOverloadInternalModels1(out *jwriter.Writer, in FilmActor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	if in.Character != "" {
		const prefix string = ",\"character\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Character))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmActor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeGoParkMailRu20222BugOverloadInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmActor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeGoParkMailRu20222BugOverloadInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmActor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeGoParkMailRu20222BugOverloadInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmActor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeGoParkMailRu20222BugOverloadInternalModels1(l, v)
}
func easyjson14b8084aDecodeGoParkMailRu20222BugOverloadInternalModels2(in *jlexer.Lexer, out *Film) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "original_name":
			out.OriginalName = string(in.String())
		case "prod_date":
			out.ProdDate = string(in.String())
		case "slogan":
			out.Slogan = string(in.String())
		case "short_description":
			out.ShortDescription = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "age_limit":
			out.AgeLimit = string(in.String())
		case "duration_minutes":
			out.DurationMinutes = int(in.Int())
		case "poster_hor":
			out.PosterHor = string(in.String())
		case "poster_ver":
			out.PosterVer = string(in.String())
		case "box_office_dollars":
			out.BoxOfficeDollars = int(in.Int())
		case "budget":
			out.Budget = int(in.Int())
		case "currency_budget":
			out.CurrencyBudget = string(in.String())
		case "count_seasons":
			out.CountSeasons = int(in.Int())
		case "end_year":
			out.EndYear = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "rating":
			out.Rating = float32(in.Float32())
		case "count_ratings":
			out.CountRatings = int(in.Int())
		case "count_actors":
			out.CountActors = int(in.Int())
		case "count_negative_reviews":
			out.CountNegativeReviews = int(in.Int())
		case "count_neutral_reviews":
			out.CountNeutralReviews = int(in.Int())
		case "count_positive_reviews":
			out.CountPositiveReviews = int(in.Int())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Tags = append(out.Tags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]string, 0, 4)
					} else {
						out.Genres = []string{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Genres = append(out.Genres, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prod_companies":
			if in.IsNull() {
				in.Skip()
				out.ProdCompanies = nil
			} else {
				in.Delim('[')
				if out.ProdCompanies == nil {
					if !in.IsDelim(']') {
						out.ProdCompanies = make([]string, 0, 4)
					} else {
						out.ProdCompanies = []string{}
					}
				} else {
					out.ProdCompanies = (out.ProdCompanies)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.ProdCompanies = append(out.ProdCompanies, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prod_countries":
			if in.IsNull() {
				in.Skip()
				out.ProdCountries = nil
			} else {
				in.Delim('[')
				if out.ProdCountries == nil {
					if !in.IsDelim(']') {
						out.ProdCountries = make([]string, 0, 4)
					} else {
						out.ProdCountries = []string{}
					}
				} else {
					out.ProdCountries = (out.ProdCountries)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.ProdCountries = append(out.ProdCountries, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]FilmActor, 0, 1)
					} else {
						out.Actors = []FilmActor{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v5 FilmActor
					(v5).UnmarshalEasyJSON(in)
					out.Actors = append(out.Actors, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "artists":
			if in.IsNull() {
				in.Skip()
				out.Artists = nil
			} else {
				in.Delim('[')
				if out.Artists == nil {
					if !in.IsDelim(']') {
						out.Artists = make([]FilmPerson, 0, 2)
					} else {
						out.Artists = []FilmPerson{}
					}
				} else {
					out.Artists = (out.Artists)[:0]
				}
				for !in.IsDelim(']') {
					var v6 FilmPerson
					(v6).UnmarshalEasyJSON(in)
					out.Artists = append(out.Artists, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "directors":
			if in.IsNull() {
				in.Skip()
				out.Directors = nil
			} else {
				in.Delim('[')
				if out.Directors == nil {
					if !in.IsDelim(']') {
						out.Directors = make([]FilmPerson, 0, 2)
					} else {
						out.Directors = []FilmPerson{}
					}
				} else {
					out.Directors = (out.Directors)[:0]
				}
				for !in.IsDelim(']') {
					var v7 FilmPerson
					(v7).UnmarshalEasyJSON(in)
					out.Directors = append(out.Directors, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "writers":
			if in.IsNull() {
				in.Skip()
				out.Writers = nil
			} else {
				in.Delim('[')
				if out.Writers == nil {
					if !in.IsDelim(']') {
						out.Writers = make([]FilmPerson, 0, 2)
					} else {
						out.Writers = []FilmPerson{}
					}
				} else {
					out.Writers = (out.Writers)[:0]
				}
				for !in.IsDelim(']') {
					var v8 FilmPerson
					(v8).UnmarshalEasyJSON(in)
					out.Writers = append(out.Writers, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "producers":
			if in.IsNull() {
				in.Skip()
				out.Producers = nil
			} else {
				in.Delim('[')
				if out.Producers == nil {
					if !in.IsDelim(']') {
						out.Producers = make([]FilmPerson, 0, 2)
					} else {
						out.Producers = []FilmPerson{}
					}
				} else {
					out.Producers = (out.Producers)[:0]
				}
				for !in.IsDelim(']') {
					var v9 FilmPerson
					(v9).UnmarshalEasyJSON(in)
					out.Producers = append(out.Producers, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operators":
			if in.IsNull() {
				in.Skip()
				out.Operators = nil
			} else {
				in.Delim('[')
				if out.Operators == nil {
					if !in.IsDelim(']') {
						out.Operators = make([]FilmPerson, 0, 2)
					} else {
						out.Operators = []FilmPerson{}
					}
				} else {
					out.Operators = (out.Operators)[:0]
				}
				for !in.IsDelim(']') {
					var v10 FilmPerson
					(v10).UnmarshalEasyJSON(in)
					out.Operators = append(out.Operators, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "montage":
			if in.IsNull() {
				in.Skip()
				out.Montage = nil
			} else {
				in.Delim('[')
				if out.Montage == nil {
					if !in.IsDelim(']') {
						out.Montage = make([]FilmPerson, 0, 2)
					} else {
						out.Montage = []FilmPerson{}
					}
				} else {
					out.Montage = (out.Montage)[:0]
				}
				for !in.IsDelim(']') {
					var v11 FilmPerson
					(v11).UnmarshalEasyJSON(in)
					out.Montage = append(out.Montage, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "composers":
			if in.IsNull() {
				in.Skip()
				out.Composers = nil
			} else {
				in.Delim('[')
				if out.Composers == nil {
					if !in.IsDelim(']') {
						out.Composers = make([]FilmPerson, 0, 2)
					} else {
						out.Composers = []FilmPerson{}
					}
				} else {
					out.Composers = (out.Composers)[:0]
				}
				for !in.IsDelim(']') {
					var v12 FilmPerson
					(v12).UnmarshalEasyJSON(in)
					out.Composers = append(out.Composers, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]string, 0, 4)
					} else {
						out.Images = []string{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Images = append(out.Images, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeGoParkMailRu20222BugOverloadInternalModels2(out *jwriter.Writer, in Film) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.OriginalName != "" {
		const prefix string = ",\"original_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginalName))
	}
	if in.ProdDate != "" {
		const prefix string = ",\"prod_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProdDate))
	}
	if in.Slogan != "" {
		const prefix string = ",\"slogan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Slogan))
	}
	if in.ShortDescription != "" {
		const prefix string = ",\"short_description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShortDescription))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.AgeLimit != "" {
		const prefix string = ",\"age_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgeLimit))
	}
	if in.DurationMinutes != 0 {
		const prefix string = ",\"duration_minutes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DurationMinutes))
	}
	if in.PosterHor != "" {
		const prefix string = ",\"poster_hor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosterHor))
	}
	if in.PosterVer != "" {
		const prefix string = ",\"poster_ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosterVer))
	}
	if in.BoxOfficeDollars != 0 {
		const prefix string = ",\"box_office_dollars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BoxOfficeDollars))
	}
	if in.Budget != 0 {
		const prefix string = ",\"budget\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Budget))
	}
	if in.CurrencyBudget != "" {
		const prefix string = ",\"currency_budget\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CurrencyBudget))
	}
	if in.CountSeasons != 0 {
		const prefix string = ",\"count_seasons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CountSeasons))
	}
	if in.EndYear != "" {
		const prefix string = ",\"end_year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EndYear))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Rating != 0 {
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Rating))
	}
	if in.CountRatings != 0 {
		const prefix string = ",\"count_ratings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CountRatings))
	}
	if in.CountActors != 0 {
		const prefix string = ",\"count_actors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CountActors))
	}
	if in.CountNegativeReviews != 0 {
		const prefix string = ",\"count_negative_reviews\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CountNegativeReviews))
	}
	if in.CountNeutralReviews != 0 {
		const prefix string = ",\"count_neutral_reviews\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CountNeutralReviews))
	}
	if in.CountPositiveReviews != 0 {
		const prefix string = ",\"count_positive_reviews\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CountPositiveReviews))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Tags {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if len(in.Genres) != 0 {
		const prefix string = ",\"genres\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Genres {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	if len(in.ProdCompanies) != 0 {
		const prefix string = ",\"prod_companies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.ProdCompanies {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	if len(in.ProdCountries) != 0 {
		const prefix string = ",\"prod_countries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.ProdCountries {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	if len(in.Actors) != 0 {
		const prefix string = ",\"actors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.Actors {
				if v22 > 0 {
					out.RawByte(',')
				}
				(v23).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Artists) != 0 {
		const prefix string = ",\"artists\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Artists {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Directors) != 0 {
		const prefix string = ",\"directors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Directors {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Writers) != 0 {
		const prefix string = ",\"writers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Writers {
				if v28 > 0 {
					out.RawByte(',')
				}
				(v29).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Producers) != 0 {
		const prefix string = ",\"producers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Producers {
				if v30 > 0 {
					out.RawByte(',')
				}
				(v31).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Operators) != 0 {
		const prefix string = ",\"operators\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Operators {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Montage) != 0 {
		const prefix string = ",\"montage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.Montage {
				if v34 > 0 {
					out.RawByte(',')
				}
				(v35).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Composers) != 0 {
		const prefix string = ",\"composers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.Composers {
				if v36 > 0 {
					out.RawByte(',')
				}
				(v37).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Images) != 0 {
		const prefix string = ",\"images\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Images {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Film) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeGoParkMailRu20222BugOverloadInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Film) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeGoParkMailRu20222BugOverloadInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Film) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeGoParkMailRu20222BugOverloadInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Film) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeGoParkMailRu20222BugOverloadInternalModels2(l, v)
}
